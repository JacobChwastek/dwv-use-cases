{"version":3,"sources":["components/dwv/TagsTable.js","components/dwv/DwvComponent.js","views/DwvView.tsx","components/common/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TagsTable","props","columns","title","dataIndex","key","state","data","this","dataSource","React","Component","dwv","gui","getElement","base","image","decoderScripts","DwvComponent","initializeDwv","app","App","init","tools","addEventListeners","setState","dwvApp","setupDropbox","utils","loadFromUri","window","location","href","nReceivedError","nReceivedAbort","addEventListener","event","loadProgress","loaded","metaData","objectToArray","getMetaData","selectedTool","isMonoSliceData","getImage","getNumberOfFrames","onChangeTool","hideDropbox","dataLoaded","alert","frame","console","error","defaultOnKeydown","updateDrawingState","obj","id","onResize","a","mode","State","jsonStr","toJSON","json","JSON","parse","onStateChange","addNewShape","deleteShape","getFramesNumberOfDicom","frameInfo","find","el","name","frames","value","parseInt","tool","options","Draw","setTool","onChangeShape","shape","setDrawShape","handleTagsDialogOpen","showDicomTags","handleTagsDialogClose","layerContainer","onDragOver","onDragLeave","onDrop","box","dropboxClassName","dropBoxSize","getLayerContainerSize","height","setAttribute","borderClassName","hoverClassName","stopPropagation","preventDefault","className","indexOf","replace","parentNode","removeChild","loadFiles","dataTransfer","files","type","events","ZoomAndPan","prevProps","dicom","arr","percent","onClick","disabled","visible","onCancel","width","footer","calculateClickPosition","DwvView","Layout","gutter","span","content","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.353e1cce.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Table } from 'antd';\r\n\r\nclass TagsTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            data: this.props.data,\r\n        };\r\n    }\r\n\r\n    columns = [\r\n        {\r\n            title: 'Tag',\r\n            dataIndex: 'name',\r\n            key: 'name'\r\n        },\r\n        {\r\n            title: 'Value',\r\n            dataIndex: 'value',\r\n            key: 'value'\r\n        },\r\n    ];\r\n\r\n    render() {\r\n        const { data } = this.state;\r\n        \r\n        return (            \r\n            <Table dataSource={data} columns={this.columns} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default TagsTable;\r\n","import React from 'react';\r\nimport { Progress, Button, Row, Modal } from 'antd';\r\nimport _ from 'lodash';\r\nimport dwv from 'dwv';\r\n\r\nimport TagsTable from './TagsTable';\r\nimport './DwvComponent.css';\r\n\r\ndwv.gui.getElement = dwv.gui.base.getElement;\r\n\r\ndwv.image.decoderScripts = {\r\n    \"jpeg2000\": \"assets/dwv/decoders/pdfjs/decode-jpeg2000.js\",\r\n    \"jpeg-lossless\": \"assets/dwv/decoders/rii-mango/decode-jpegloss.js\",\r\n    \"jpeg-baseline\": \"assets/dwv/decoders/pdfjs/decode-jpegbaseline.js\",\r\n    \"rle\": \"assets/dwv/decoders/dwv/decode-rle.js\"\r\n};\r\n\r\nclass DwvComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            tools: {\r\n                Draw: {\r\n                    options: ['Ellipse'],\r\n                    type: 'factory',\r\n                    events: ['draw-create', 'draw-change', 'draw-move', 'draw-delete']\r\n                },\r\n                ZoomAndPan: {}\r\n            },\r\n            selectedTool: 'Select Tool',\r\n            loadProgress: 0,\r\n            dataLoaded: false,\r\n            dwvApp: null,\r\n            metaData: [],\r\n            showDicomTags: false,\r\n            dropboxClassName: 'dropBox',\r\n            borderClassName: 'dropBoxBorder',\r\n            hoverClassName: 'hover',\r\n            frame: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initializeDwv();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if ((this.props.dicom !== prevProps.dicom) && this.props.dicom !== null) {\r\n            const arr = [this.props.dicom];\r\n            this.state.dwvApp.loadFiles(arr);\r\n        }\r\n\r\n        if (this.props.selectedTool !== prevProps.selectedTool) {\r\n            this.onChangeTool(this.props.selectedTool);\r\n        }\r\n      }\r\n\r\n    render() {\r\n        const { loadProgress, dataLoaded, metaData, selectedTool, showDicomTags } = this.state;\r\n\r\n        return (\r\n            <div id='dwv'>\r\n                <Progress percent={loadProgress} />\r\n                <Button onClick={this.handleTagsDialogOpen} disabled={!dataLoaded}>\r\n                    Tagi DICOM\r\n                </Button>\r\n                {selectedTool === 'Draw' && <Row>Dodawanie / Edycja artefaktu...</Row>}\r\n                <Modal\r\n                    visible={showDicomTags}\r\n                    onCancel={this.handleTagsDialogClose}\r\n                    width={1000}\r\n                    footer={null}\r\n                >\r\n                    <TagsTable data={metaData} />\r\n                </Modal>\r\n                <div className=\"layerContainer\">\r\n                    <div className=\"dropBox dropBoxBorder\">\r\n                        Drag and drop data here.\r\n                    </div>\r\n                    <canvas className=\"imageLayer\" onClick={this.calculateClickPosition}>\r\n                        Only for HTML5 compatible browsers...\r\n                    </canvas>\r\n                    <div className=\"drawDiv\"></div>\r\n                </div>\r\n                { this.getFramesNumberOfDicom() && `Frame: ${this.state.frame} / ${this.getFramesNumberOfDicom()}` }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    initializeDwv = () => {\r\n        var app = new dwv.App();\r\n        \r\n        app.init({\r\n            \"containerDivId\": \"dwv\",\r\n            \"tools\": this.state.tools\r\n        });\r\n\r\n        this.addEventListeners(app);\r\n\r\n        this.setState({ dwvApp: app });\r\n\r\n        this.setupDropbox(app);\r\n\r\n        dwv.utils.loadFromUri(window.location.href, app);\r\n    }\r\n\r\n    addEventListeners = (app) => {\r\n        let nReceivedError = null;\r\n        let nReceivedAbort = null;\r\n        \r\n        app.addEventListener('load-start', () => {\r\n            nReceivedError = 0;\r\n            nReceivedAbort = 0;\r\n        });\r\n        \r\n        app.addEventListener(\"load-progress\", (event) => {\r\n            this.setState({ loadProgress: event.loaded });\r\n        });\r\n        \r\n        app.addEventListener(\"load\", () => {\r\n            this.setState({ metaData: dwv.utils.objectToArray(app.getMetaData()) });\r\n            let selectedTool = 'Scroll'\r\n            if (app.isMonoSliceData() && app.getImage().getNumberOfFrames() === 1) {\r\n                selectedTool = 'ZoomAndPan';\r\n            }\r\n            this.onChangeTool(selectedTool);\r\n            this.hideDropbox();\r\n            this.setState({ dataLoaded: true });\r\n        });\r\n        \r\n        app.addEventListener('load-end', () => {\r\n            if (nReceivedError) {\r\n                this.setState({ loadProgress: 0 });\r\n                alert('Received errors during load. Check log for details.');\r\n            }\r\n            if (nReceivedAbort) {\r\n                this.setState({ loadProgress: 0 });\r\n                alert('Load was aborted.');\r\n            }\r\n            this.setState({ loadProgress: 100 });\r\n        });\r\n        \r\n        app.addEventListener('frame-change', (event) => {\r\n            this.setState({ frame: event.frame })\r\n        });\r\n        \r\n        app.addEventListener('error', (event) => {\r\n            console.error(event.error);\r\n            ++nReceivedError;\r\n        });\r\n        \r\n        app.addEventListener('abort', () => {\r\n            ++nReceivedAbort;\r\n        });\r\n\r\n        app.addEventListener('keydown', (event) => {\r\n            app.defaultOnKeydown(event);\r\n        });\r\n\r\n        app.addEventListener('draw-move', () => {\r\n            this.updateDrawingState();\r\n        });\r\n        app.addEventListener('draw-change', () => {\r\n            this.updateDrawingState();\r\n        });\r\n\r\n        app.addEventListener('draw-create', (obj) => {\r\n            this.updateDrawingState('add', obj.id);\r\n        });\r\n\r\n        app.addEventListener('draw-delete', (obj) => {\r\n            this.updateDrawingState('delete', obj.id);\r\n        });\r\n\r\n        window.addEventListener('resize', app.onResize);\r\n    }\r\n\r\n    updateDrawingState = async (mode = null, id = null) => {\r\n        const { dwvApp } = this.state;\r\n        \r\n        if (dwvApp) {\r\n            const state = new dwv.State();\r\n            const jsonStr = state.toJSON(dwvApp); \r\n            const json = JSON.parse(jsonStr);\r\n\r\n            await this.props.onStateChange(json);\r\n\r\n            if (mode === 'add') {\r\n                this.props.addNewShape(id);\r\n            }\r\n\r\n            if (mode === 'delete') {\r\n                this.props.deleteShape(id);\r\n            }\r\n        }\r\n    }\r\n\r\n    getFramesNumberOfDicom = () => {\r\n        const { metaData } = this.state;\r\n\r\n        if (metaData) {\r\n            const frameInfo = metaData.find(el => el.name === 'NumberOfFrames');\r\n            const frames = frameInfo && frameInfo.value;\r\n\r\n            return frames && parseInt(frames) - 1 \r\n        }\r\n    } \r\n    \r\n    onChangeTool = tool => {\r\n        const {dwvApp, tools: {Draw: {options}}} = this.state;\r\n\r\n        if (dwvApp) {\r\n            this.setState({ selectedTool: tool });\r\n            dwvApp.setTool(tool);\r\n\r\n            if (tool === 'Draw') {\r\n                this.onChangeShape(options[0]);\r\n            }\r\n        }\r\n    }\r\n\r\n    onChangeShape = shape => {\r\n        const { dwvApp } = this.state;\r\n\r\n        if (dwvApp) { dwvApp.setDrawShape(shape); }\r\n    }\r\n\r\n    handleTagsDialogOpen = () => {\r\n        this.setState({ showDicomTags: true });\r\n    }\r\n\r\n    handleTagsDialogClose = () => {\r\n        this.setState({ showDicomTags: false });\r\n    };\r\n\r\n    setupDropbox = app => {\r\n        \r\n        const layerContainer = app.getElement('layerContainer');\r\n\r\n        if (layerContainer) {\r\n            layerContainer.addEventListener('dragover', this.onDragOver);\r\n            layerContainer.addEventListener('dragleave', this.onDragLeave);\r\n            layerContainer.addEventListener('drop', this.onDrop);\r\n        }\r\n\r\n        const box = app.getElement(this.state.dropboxClassName);\r\n\r\n        if (box) {\r\n            const size = app.getLayerContainerSize();\r\n            const dropBoxSize = 2 * size.height / 3;\r\n\r\n            box.setAttribute('style', 'width:' + dropBoxSize + 'px;height:' + dropBoxSize + 'px');\r\n        }\r\n    }\r\n\r\n    onDragOver = event => {\r\n        const { dwvApp, borderClassName, hoverClassName } = this.state;\r\n\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n\r\n        const box = dwvApp.getElement(borderClassName);\r\n\r\n        if (box && box.className.indexOf(hoverClassName) === -1) {\r\n            box.className += ' ' + hoverClassName;\r\n        }\r\n    }\r\n\r\n    onDragLeave = event => {\r\n        const { dwvApp, hoverClassName} = this.state;\r\n\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n\r\n        const box = dwvApp.getElement(this.borderClassName + ' hover');\r\n\r\n        if (box && box.className.indexOf(hoverClassName) !== -1) {\r\n            box.className = box.className.replace(' ' + hoverClassName, '');\r\n        }\r\n    }\r\n\r\n    hideDropbox = () => {\r\n        const { dwvApp, dropboxClassName} = this.state;\r\n\r\n        const box = dwvApp.getElement(dropboxClassName);\r\n\r\n        if (box) { box.parentNode.removeChild(box); }\r\n    }\r\n\r\n    onDrop = event => {\r\n        const { dwvApp } = this.state;\r\n\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        \r\n        dwvApp.loadFiles(event.dataTransfer.files);\r\n        this.hideDropbox();\r\n    }\r\n} \r\n\r\nexport default DwvComponent;\r\n","import React, { Component } from 'react'\r\nimport DwvComponent from \"../components/dwv/DwvComponent\";\r\n\r\nexport default class DwvView extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <DwvComponent/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Row, Col } from \"antd\";\r\n// import styled from \"styled-components\";\r\n\r\ntype Props = {\r\n    content: JSX.Element[] | JSX.Element | string | null\r\n}\r\n\r\nconst Layout = (props: Props) => {\r\n    return (\r\n        <Row gutter={[16, 16]}>\r\n            <Col span={8}>\r\n\r\n            </Col>\r\n            <Col span={8}>\r\n                {props.content}\r\n            </Col>\r\n            <Col span={8}>\r\n\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\nexport default Layout;","import React from 'react';\r\nimport DwvView from \"./views/DwvView\";\r\nimport { Layout } from \"./components/common\" \r\n\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Layout \r\n        content={<DwvView/>}\r\n        />\r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}